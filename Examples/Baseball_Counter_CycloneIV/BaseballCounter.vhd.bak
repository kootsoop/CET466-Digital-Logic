LIBRARY ieee;

USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;
entity bbCounter is
port(
IBC, ISC, NB: in std_logic;
d1, d2: out std_logic;
display: out std_logic_vector(7 downto 0)
);
end entity;
Architecture bbCounter_arch of bbCounter is
Signal b, s: integer
Signal bd, sd, d: std_logic_vector(7 downto 0)
begin
with b select
	bd <= "11000000" when 0,
	bd <= "11111001" when 1,
	bd <= "10100100" when 2,
	bd <= "10110000" when 3,
	bd <= "10011001" when 4;
	bd <= "11111111" when others;
with s select
	sd <= "11000000" when 0,
	sd <= "11111001" when 1,
	sd <= "10100100" when 2,
	sd <= "10110000" when 3;
	sd <= "11111111" when others;
process(IBC, ISC, NB)
begin
if (IBC = '0')
	then 
	if(b = 3)
		then 
		b<= 4;
		wait 100 ns;
		b<= 5;
		wait 100 ns;
		b<= 4;
		wait 100 ns;
		b<= 5;
		wait 100 ns;
		b<= 0;
		else b <= b + 1;
	end if;
end if;

if (ISC = '0')
	then 
	if(s = 2)
		then 
		s<= 3;
		wait 100 ns;
		s<= 5;
		wait 100 ns;
		s<= 3;
		wait 100 ns;
		s<= 5;
		wait 100 ns;
		s<= 3;
		wait 100 ns;
		s<= 5;
		wait 100 ns;
		s<= 0;
		else s <= s + 1;
	end if;
end if;
if (NB = '0')
then 
b <= 0;
s <= 0;
end if;
end process;
process (bd, sd)
if(bd'event and sd'event)
then 
dig1<= 0;
display <= bd;
wait 100 ns;
dig1<=1;
dig2<= 0;
display <= sd;
wait 100 ns;
dig2<= 1;
else if(bd'event)
dig1<= 0;
display <= bd;
wait 100 ns;
dig1<=1;
else
dig2<= 0;
display <= sd;
wait 100 ns;
dig2<= 1;
end if;
end if;
end Architecture; 